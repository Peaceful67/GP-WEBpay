<?php

include_once 'settings.inc';

function commerce_gpwebpay_permission() {
    return ['manage gpwebpay settings' => [
            'title' => t('Administer GP Webpay'),
            'description' => t('Perform to administer GpWebpay Gateway'),
            'restrict_access' => TRUE,
        ],
    ];
}

function commerce_gpwebpay_menu() {

    $items = array();
    $items['admin/commerce/config/gpwebpay'] = [
        'title' => 'GP Webpay',
        'description' => 'Configuration of GP Webpay',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('commerce_gpwebpay_settings_form'),
        'access arguments' => array('manage gpwebpay settings'),
        'file' => 'gpwebpay_admin.inc',
    ];

//  path to receive IPNs.
    $items[GP_RESPONSE] = [
        'title' => 'Visszatérés a GP WEBPay fizetés oldaláról',
        'page callback' => 'commerce_gpwebpay_process_ipn',
        'page arguments' => array(),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
        'file' => 'gpwebpay_ipn.inc',
    ];
    

    return $items;
}

function commerce_gpwebpay_redirect_form($form, &$form_state, $order, $payment_method) {
    global $base_url;
    $gpwebpay_currencies = [
        'HUF' => 348,
    ];
    $relative = base_path() . drupal_get_path('module', 'commerce_gpwebpay');
    $base = getcwd() . $relative;
    $order_number = $order->order_id;
    $wrapper = entity_metadata_wrapper('commerce_order', $order);
    $amount = $wrapper->commerce_order_total->amount->value();
    $currency_code = $wrapper->commerce_order_total->currency_code->value();
    $transaction = commerce_payment_transaction_new('commerce_gpwebpay', $order_number);
    $transaction->instance_id = $payment_method['instance_id'];
    $transaction->amount = $amount;
    $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
    $transaction->currency_code = $currency_code;
    commerce_payment_transaction_save($transaction);

    //   dvm($transaction);
    $gp_send = [
        'MERCHANTNUMBER' => variable_get('commerce_gpwebpay_merchant', '---'),
        'OPERATION' => 'CREATE_ORDER',
        'ORDERNUMBER' => $order_number,
        'AMOUNT' => $amount * 100,
        'CURRENCY' => $gpwebpay_currencies[$currency_code],
        'DEPOSITFLAG' => 0,
        'MERORDERNUM' => $transaction->transaction_id,
        'URL' => $base_url . '/' . GP_RESPONSE,
        'EMAIL' => '',
    ];
    $sign = new CSignature($base . PRIVATE_KEY, variable_get('commerce_gpwebpay_passwd', '---'), commerce_gpwebpay_public_key());
    $sign_data = '';
    foreach ($gp_send as $name => $value) {
        if (isset($value)) {
            //        error_log($name.' => '.$value);
            $form[$name] = array('#type' => 'hidden', '#value' => $value);
            $sign_data .= $value . '|';
        }
    }
    $sign_data = substr($sign_data, 0, -1); // remove the last character
    $signature = $sign->sign($sign_data);
    $form['DIGEST'] = array('#type' => 'hidden', '#value' => $signature);
    $form['#action'] = commerce_gpwebpay_payment_url();

    $form['#method'] = 'post';
    $form['submit'] = [
        '#value' => t('Tovább a fizetéshez'),
        '#type' => 'submit'];
    return $form;
}



function commerce_gpwebpay_commerce_payment_method_info() {
    $payment_methods = array();
    if (1 == variable_get('commerce_gpwebpay_enabled', 1)) {
        $payment_methods['commerce_gpwebpay'] = array(
            'method_id' => 'commerce_gpwebpay',
            'title' => t('GP WebPay'),
            'short_title' => t('GP WebPay'),
            'description' => t('GP WebPay Gateway'),
            'terminal' => false,
            'offsite' => TRUE,
            'active' => true,
            'checkout' => TRUE,
            'offsite_autoredirect' => true,
        );
    }
    return $payment_methods;
}

function commerce_gpwebpay_public_key() {
    $base = getcwd() . base_path() . drupal_get_path('module', 'commerce_gpwebpay');
    return $base . (variable_get('commerce_gpwebpay_public_key', 0)==0 ? PUBLIC_TEST_GP_KEY : PUBLIC_PROD_GP_KEY);
}

function commerce_gpwebpay_payment_url() {
    return (variable_get('commerce_gpwebpay_public_key', 0)==0 ? GP_TEST_URL : GP_PRODUCTION_URL);
}

class CSignature {

    var $privateKey, $privateKeyPassword, $publicKey;

    function __construct($privateKey, $privateKeyPassword, $publicKey) {
        $fp = fopen($privateKey, "r");
        $this->privateKey = fread($fp, filesize($privateKey));
        fclose($fp);
        $this->privateKeyPassword = $privateKeyPassword;

        $fp = fopen($publicKey, "r");
        $this->publicKey = fread($fp, filesize($publicKey));
        fclose($fp);
    }

    function sign($text) {
        $pkeyid = openssl_get_privatekey($this->privateKey, $this->privateKeyPassword);
        openssl_sign($text, $signature, $pkeyid);
        $signature = base64_encode($signature);
        openssl_free_key($pkeyid);
        return $signature;
    }

    function verify($text, $signature) {
        $pubkeyid = openssl_get_publickey($this->publicKey);
        $signature = base64_decode($signature);
        $result = openssl_verify($text, $signature, $pubkeyid);
        openssl_free_key($pubkeyid);
        return (($result == 1) ? true : false);
    }

}
